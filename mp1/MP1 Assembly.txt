;Intializing or Clearing Registers
AND R0,R0,#0 ;Clears R0
AND R1,R1,#0 ;Clears R1
AND R2,R2,#0 ;Clears R2
AND R3,R3,#0 ;Clears R3
AND R4,R4,#0 ;Clears R4
AND R5,R5,#0 ;Clears R5
AND R6,R6,#0 ;Clears R6

; -Register Table-
; R0: Used for printing, takes ASCII values and is used in TRAP execution (OUT)
; R1: Used for storing binary string from histogram, shifted left four times per cycle/read/print
; R2: Used for holding the offset values used in calculating the ASCII HEX values for printing
; R3: Used for keeping track of what letter we're currently on - prints first.
; R4: Used for innerloop, starts at 4 for left shifting the binary string
; R5: Used for middleloop, starts at 4 and increments down to zero with each set of HEX values
; R6: Used for outerloop, starts at 27 and increments down to zero

LD R6,NUM_BINS  ;Initializes R6 with the number of bins

PRINT_FIRST
LD R0,STARTCHAR ;Loads R0 with starting character ASCII value
OUT		;Prints first character of line
ADD R0,R0,#1	;Increments value of STARTCHAR
ST R0,STARTCHAR ;Stores new value of STARTCHAR after incrementation
LD R0,SPACE	;Loads R0 with ASCII value for SPACE
OUT		;Prints space

; Next step: extraction 

EXTRACT ;--The next few lines dictate the EXTRACT
AND R0,R0,#0 ;Clears destination register R0, used in printing
AND R1,R1,#0 ;Clears R1 for storing binary string
AND R4,R4,#0 ;Clears R4 for innerloop counter
AND R5,R5,#0 ;Clears R5 for middleloop counter
ADD R4,R4,#4 ;Adds 4 to R4 for innerloop counter
ADD R5,R5,#4 ;Adds 4 to R5 for middleloop counter

LDI R1,HIST_ADDR ;Loads binary string into R1

EXTRACT_LOOP
ADD R0,R0,R0	 ;Shifts R0 to make space for next bit
ADD R1,R1,#0     ;Checks if highest bit of R1 is 0 or 1
BRzp SHIFT	 ;Skips addition if zero
ADD R0,R0,#1     ;Adds 1 to R0 if 1 is present
SHIFT ADD R1,R1,R1 ;Shifts R1 to the left
ADD R4,R4,#-1    ;Subtracts 1 from innerloop
BRp EXTRACT_LOOP ;Loops until R4 hits zero
LD R3,OFFSET1 	 ;Loads the first offset value into R3
ADD R0,R0,R3	 ;Adds the offset value to R0
LD R3,VALCHECK	 ;Loads the value of Valcheck into R3 for subtraction
NOT R3,R3	 ;Inverts R3 for subtraction
ADD R3,R3,#1	 ;Adds 1 to R3 for subtraction
ADD R3,R0,R3	 ;Subtracts R0 and R3 for value check, to see if it exceeds original offset
BRn		 ;Checks if value is larger than 39. If it's larger, add second offset, if not then skip
LD R3,OFFSET2	 ;Loads second offset value into R3
ADD R0,R0,R3	 ;Adds second offset value into R0
OUT
ADD R5,R5,#-1	 ;Subracts one from R5 to decrease middleloop counter
BRp EXTRACT_LOOP ;Loops back if R5 has not fully decreased
ADD R6,R6,#-1	 ;Decreases outerloop counter by 1
BRz DONE	 ;Checks if outerloop is zero
AND R0,R0,#0     ;Clears R0
ADD R0,R0,#10    ;Adds value for newline into R0
OUT
LD R1, HIST_ADDR;Loads the value of HIST_ADDR
ADD R1,R1,#1	;Adds 1 to HIST_ADDR
ST R1,HIST_ADDR ;Stores new value of incremented HIST_ADDR
BRnzp PRINT_FIRST;Reiterates back into beginning until R6 = 0. The previous section prevents extra newlines from being added.


; --Below are lines used for constant values--
STARTCHAR .FILL x0040
SPACE	  .FILL x0020
VALCHECK  .FILL x0039
OFFSET1   .FILL x0030
OFFSET2   .FILL x0007

